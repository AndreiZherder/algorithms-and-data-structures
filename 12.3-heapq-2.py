"""
Параллельная обработка
По данным n процессорам и m задач определите, для каждой из задач,
каким процессором она будет обработана.
Вход. Число процессоров n и последовательность чисел
t0; : : : ; tm - 1, где ti — время, необходимое на обработку i-й
задачи.
Выход. Для каждой задачи определите, какой процессор
и в какое время начнет ее обрабатывать, предполагая, что
каждая задача поступает на обработку первому освободив-
шемуся процессору.
В данной задаче ваша цель — реализовать симуляцию параллель-
ной обработки списка задач. Такие обработчики (диспетчеры) есть во
всех операционных системах.
У вас имеется n процессоров и последовательность из m задач. Для
каждой задачи дано время, необходимое на ее обработку. Очеред-
ная работа поступает к первому доступному процессору (то есть если
доступных процессоров несколько, то доступный процессор с мини-
мальным номером получает эту работу).
Формат входа. Первая строка входа содержит числа n и m. Вторая
содержит числа t0; : : : ; tm - 1, где ti — время, необходимое на об-
работку i-й задачи. Считаем, что и процессоры, и задачи нуме-
руются с нуля.
Формат выхода. Выход должен содержать ровно m строк: i-я (счи-
тая с нуля) строка должна содержать номер процессора, который
получит i-ю задачу на обработку, и время, когда это произойдет.
Ограничения. 1 <= n <= 105; 1 <= m <= 10^5; 0 <= ti <= 10^9.
21
Пример.
Вход:
2 5
1 2 3 4 5
Выход:
0 0
1 0
0 1
1 2
0 4
Пример.
Вход:
4 20
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
Выход:
0 0
1 0
2 0
3 0
0 1
1 1
2 1
3 1
0 2
1 2
2 2
3 2
0 3
1 3
2 3
3 3
0 4
1 4
2 4
3 4
"""

from collections import deque
from heapq import heapify, heappop, heappush


def main():
    n, m = (int(num) for num in input().split())
    times = deque((int(num) for num in input().split()))
    heap = [(0, i) for i in range(n)]
    heapify(heap)
    while times:
        time = times.popleft()
        t, i = heappop(heap)
        print(i, t)
        if time:
            t += time
        heappush(heap, (t, i))


if __name__ == '__main__':
    main()
