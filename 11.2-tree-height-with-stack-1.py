"""
Высота дерева
Вычислить высоту данного дерева.
Вход. Корневое дерево с вершинами 0; : : : ; n-1, заданное
как последовательность parent0; : : : ; parentn-1, где parenti —
родитель i-й вершины.
Выход. Высота дерева.

Деревья имеют огромное количество при-
менений в Computer Science. Они используются
как для представления данных, так и во мно-
гих алгоритмах машинного обучения. Далее
мы также узнаем, как сбалансированные де-
ревья используются для реализации словарей
и ассоциативных массивов. Данные структуры
данных так или иначе используются во всех
языках программирования и базах данных.
Ваша цель в данной задаче — научиться хранить и эффективно об-
рабатывать деревья, даже если в них сотни тысяч вершин.

Формат входа. Первая строка содержит натуральное число n. Вторая
строка содержит n целых чисел parent0; : : : ; parentn-1. Для каждо-
го 0 <= i <= n-1, parenti — родитель вершины i; если parenti = -1,
то i является корнем. Гарантируется, что корень ровно один. Га-
рантируется, что данная последовательность задает дерево.
Формат выхода. Высота дерева.
Ограничения. 1 <= n <= 10^5.

Пример.
Вход:
5
4 -1 4 1 1
Выход:
3

Пример.
Вход:
5
-1 0 4 0 3
Выход:
4
"""
from collections import defaultdict


def main():
    tree = defaultdict(list)
    n = int(input())
    for child, parent in enumerate(int(parent) for parent in input().split()):
        tree[parent].append(child)
    stack = [(tree[-1][0], 1)]
    m = 1
    while stack:
        node = stack.pop()
        m = max(m, node[1])
        if node[0] in tree:
            for num in tree[node[0]]:
                stack.append((num, node[1] + 1))
    print(m)


if __name__ == '__main__':
    main()
