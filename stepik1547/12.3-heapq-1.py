"""
Построение кучи
Переставить элементы заданного массива чисел так, чтобы он удовле-
творял свойству мин-кучи.
Вход. Массив чисел A[0 : : : n - 1].
Выход. Переставить элементы массива так, чтобы выпол-
нялись неравенства A[i] <= A[2i + 1] и A[i] <= A[2i + 2] для
всех i.

Построение кучи — ключевой шаг ал-
горитма сортировки кучей. Данный алго-
ритм имеет время работы O(n log n) в худ-
шем случае в отличие от алгоритма быст-
рой сортировки, который гарантирует та-
кую оценку только в среднем случае. Алго-
ритм быстрой сортировки чаще использу-
ют на практике, поскольку в большинстве
случаев он работает быстрее, но алгоритм
сортировки кучей используется для внеш-
ней сортировки данных, когда необходимо
отсортировать данные огромного размера,
не помещающиеся в память компьютера.
Чтобы превратить данный массив в кучу, необходимо произвести
несколько обменов его элементов. Обменом мы называем базовую
операцию, которая меняет местами элементы A[i] и A[j]. Ваша цель
в данной задаче — преобразовать заданный массив в кучу за линей-
ное количество обменов.
Формат входа. Первая строка содержит число n. Следующая строка
задает массив чисел A[0]; : : : ;A[n - 1].
Формат выхода. Первая строка выхода должна содержать число об-
менов m, которое должно удовлетворять неравенству 0 <= m <= 4n.
Каждая из последующих m строк должна задавать обмен двух
элементов массива A. Каждый обмен задается парой различных
индексов 0 <= i != j <= n - 1. После применения всех обменов в
указанном порядке массив должен превратиться в мин-кучу, то
есть для всех 0 <= i <= n - 1 должны выполняться следующие два
условия:
если 2i + 1 <= n - 1, то A[i] < A[2i + 1].
если 2i + 2 <= n - 1, то A[i] < A[2i + 2].
Ограничения. 1 <= n <= 10^5; 0 <= A[i] <= 10^9 для всех 0 <= i <= n - 1; все
A[i] попарно различны; i != j.
Пример.
Вход:
5
5 4 3 2 1
Выход:
3
1 4
0 1
1 3
Пример.
Вход:
5
1 2 3 4 5
Выход:
0
"""
from typing import List


def leftchild(i: int) -> int:
    return 2 * i + 1


def rightchild(i: int) -> int:
    return 2 * i + 2


def siftdown(a: List[float], i: int, ans: List):
    n = len(a)
    min_index = i
    l = leftchild(i)
    if l < n and a[l] < a[min_index]:
        min_index = l
    r = rightchild(i)
    if r < n and a[r] < a[min_index]:
        min_index = r
    while i != min_index:
        a[i], a[min_index] = a[min_index], a[i]
        ans.append((i, min_index))
        i = min_index
        l = leftchild(i)
        if l < n and a[l] < a[min_index]:
            min_index = l
        r = rightchild(i)
        if r < n and a[r] < a[min_index]:
            min_index = r


def main():
    n = int(input())
    a = [float(num) for num in input().split()]
    ans = []
    for i in range((n - 2) // 2, -1, -1):
        siftdown(a, i, ans)
    print(len(ans))
    for pair in ans:
        print(*pair)


if __name__ == '__main__':
    main()
